<?php

/**
 * @file
 * Provides hook implementations for the AI Content Summary module.
 *
 * This module provides AI-powered content summarization functionality
 * for Drupal nodes with configurable field targeting.
 */

use Drupal\Core\Ajax\MessageCommand;
use Drupal\Core\Ajax\InvokeCommand;
use Drupal\Core\Ajax\AlertCommand;
use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\node\NodeInterface;
use Drupal\Component\Render\PlainTextOutput;

/**
 * Returns plain text for a node using the configured view mode.
 *
 * @param \Drupal\node\NodeInterface $node
 *   The node entity to render.
 *
 * @return string
 *   The plain text content of the rendered node using the configured view mode.
 */
function _ai_content_summary_source_text_from_view_mode(NodeInterface $node)
{
  // Get view mode from configuration.
  $config = \Drupal::config('ai_content_summary.settings');
  $view_mode = $config->get('view_mode') ?? 'ai_summary_source';

  $view_builder = \Drupal::entityTypeManager()->getViewBuilder('node');
  $build = $view_builder->view($node, $view_mode);
  $html = (string) \Drupal::service('renderer')->renderPlain($build);
  return trim(PlainTextOutput::renderFromHtml($html));
}

/**
 * Implements hook_form_alter().
 *
 * Adds a summary generation button to enabled node forms.
 *
 * @param array $form
 *   The form array.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The current state of the form.
 * @param string $form_id
 *   The form identifier.
 */
function ai_content_summary_form_alter(array &$form, FormStateInterface $form_state, $form_id)
{
  $config = \Drupal::config('ai_content_summary.settings');
  $enabled_types = $config->get('enabled_types') ?? [];

  // Check if this is a node form for an enabled content type.
  if (strpos($form_id, 'node_') === 0 && (strpos($form_id, '_form') !== FALSE)) {
    // Extract content type from form ID: node_{content_type}_form or
    // node_{content_type}_edit_form.
    $node_type = '';
    if (preg_match('/^node_(.+?)_edit_form$/', $form_id, $matches)) {
      $node_type = $matches[1];
    } elseif (preg_match('/^node_(.+?)_form$/', $form_id, $matches)) {
      $node_type = $matches[1];
    }

    if (!empty($node_type) && isset($enabled_types[$node_type]) && $enabled_types[$node_type] && \Drupal::currentUser()->hasPermission('generate ai summaries')) {
      // Create help text for manual generation.
      $help_text = t('Use the "Generate AI Summary" button to create a summary, or manually enter one. Note: The node must be saved first before generating an AI summary as it uses the saved content, not unsaved form changes.');

      // Prioritize dedicated summary field over body field with summary.
      // Only show one Generate AI Summary button.
      if (isset($form['field_summary']['widget'][0]['value'])) {
        // Dedicated summary field takes priority.
        $form['field_summary']['widget'][0]['#attached']['library'][] = 'ai_content_summary/summary-generator';

        // Add help text to the summary field.
        $form['field_summary']['widget'][0]['value']['#description'] = $help_text;

        // Add summary generation button.
        $form['field_summary']['widget'][0]['summary_generation'] = [
          '#type' => 'button',
          '#value' => t('Generate AI Summary'),
          '#attributes' => [
            'class' => ['ai-summary-generate-button'],
            'data-field-name' => 'field_summary',
          ],
          '#limit_validation_errors' => [],
          '#ajax' => [
            'callback' => 'ai_content_summary_generate_summary_ajax',
            'wrapper' => 'edit-field-summary-0-value',
          ],
        ];
      } elseif (isset($form['body']['widget'][0]['summary'])) {
        // Fallback to body field with summary if dedicated field not present.
        $form['body']['widget'][0]['#attached']['library'][] = 'ai_content_summary/summary-generator';

        // Add help text to the body summary field.
        $form['body']['widget'][0]['summary']['#description'] = $help_text;

        // Add summary generation button.
        $form['body']['widget'][0]['summary_generation'] = [
          '#type' => 'button',
          '#value' => t('Generate AI Summary'),
          '#attributes' => [
            'class' => ['ai-summary-generate-button'],
            'data-field-name' => 'body',
          ],
          '#limit_validation_errors' => [],
          '#ajax' => [
            'callback' => 'ai_content_summary_generate_summary_ajax',
            'wrapper' => 'edit-body-0-summary',
          ],
        ];
      }
    }
  }
}

/**
 * AJAX callback for generating a summary.
 *
 * @param array $form
 *   The form array.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The current state of the form.
 *
 * @return \Drupal\Core\Ajax\AjaxResponse
 *   The AJAX response containing a summary or error message.
 */
function ai_content_summary_generate_summary_ajax(array &$form, FormStateInterface $form_state)
{
  $response = new AjaxResponse();

  // Get the node entity without trying to extract problematic form values.
  $form_object = $form_state->getFormObject();
  if (!$form_object || !method_exists($form_object, 'getEntity')) {
    $response->addCommand(new AlertCommand(t('Unable to obtain the node for summarization.')));
    return $response;
  }

  /** @var \Drupal\node\NodeInterface $node */
  $node = $form_object->getEntity();

  // Pull full content via view mode using existing entity content.
  // Note: This uses the currently saved content, not unsaved form values.
  // Users should save their content first if they want the latest changes summarized.
  $content = _ai_content_summary_source_text_from_view_mode($node);
  if (trim($content) === '') {
    $response->addCommand(new AlertCommand(t('No content found to summarize. Please save your content first, then generate a summary.')));
    return $response;
  }

  try {
    $ai_service = \Drupal::service('ai_content_summary.service');
    $config = \Drupal::config('ai_content_summary.settings');
    $clean_content = $ai_service->cleanText($content);
    $summary = $ai_service->generateSummary(
      $clean_content,
      $config->get('max_length'),
      $config->get('min_length')
    );

    // Write into the prioritized field (dedicated summary field takes priority).
    if (isset($form['field_summary']['widget'][0]['value'])) {
      $response->addCommand(new InvokeCommand('textarea[name="field_summary[0][value]"]', 'val', [$summary]));
    } elseif (isset($form['body']['widget'][0]['summary'])) {
      $response->addCommand(new InvokeCommand('textarea[name="body[0][summary]"]', 'val', [$summary]));
    }

    $response->addCommand(new MessageCommand(t('Summary generated successfully!'), NULL, ['type' => 'status']));
  } catch (\Exception $e) {
    $response->addCommand(new AlertCommand(t('Error generating summary: @error', ['@error' => $e->getMessage()])));
  }
  return $response;
}
